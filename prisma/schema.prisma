// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      ProjectMember[]
  tasks         Task[]        @relation("AssignedTasks")
  comments      Comment[]
  chatMessages  ChatMessage[]
  mentions      Mention[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String
  tags        String[]
  members     ProjectMember[]
  tasks       Task[]
  docs        DocPage[]
  chatMessages ChatMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      Status   @default(TODO)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  projectId   String
  assignedTo  String?
  project     Project  @relation(fields: [projectId], references: [id])
  assignee    User?    @relation("AssignedTasks", fields: [assignedTo], references: [id])
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model DocPage {
  id        String   @id @default(cuid())
  title     String
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  mentions  Mention[]
  createdAt DateTime @default(now())
}

model Mention {
  id        String       @id @default(cuid())
  messageId String
  userId    String
  message   ChatMessage  @relation(fields: [messageId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
}