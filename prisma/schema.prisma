generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["dev_operations_db"]
}

model Account {
  id                String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("Account")
  @@schema("dev_operations_db")
}

model Session {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("Session")
  @@schema("dev_operations_db")
}

model User {
  id                  String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  name                String?
  email               String?              @unique
  emailVerified       DateTime?            @db.Timestamp(6)
  image               String?
  subscriptionTier    String?              @default("free")
  projectLimit        Int?                 @default(5)
  stripeCustomerId    String?
  subscriptionStatus  String?
  createdAt           DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt           DateTime?            @default(now()) @updatedAt @db.Timestamp(6)
  accounts            Account[]
  chatMessages        ChatMessage[]
  comments            Comment[]
  mentions            Mention[]
  notifications       Notification[]
  paymentTransactions PaymentTransaction[]
  projects            ProjectMember[]
  sessions            Session[]
  stripeCustomer      StripeCustomer?
  tasks               Task[]               @relation("AssignedTasks")
  usageTracking       UsageTracking[]
  settings            UserSettings?
  subscriptions       UserSubscription[]

  @@map("User")
  @@schema("dev_operations_db")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("VerificationToken")
  @@schema("dev_operations_db")
}

model Project {
  id           String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  name         String
  description  String
  tags         String[]        @default([])
  createdAt    DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?       @default(now()) @updatedAt @db.Timestamp(6)
  chatMessages ChatMessage[]
  docs         DocPage[]
  members      ProjectMember[]
  tasks        Task[]

  @@map("Project")
  @@schema("dev_operations_db")
}

model ProjectMember {
  id        String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  role      String
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, projectId], name: "userId_projectId")
  @@map("ProjectMember")
  @@schema("dev_operations_db")
}

model Task {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  title       String
  description String?
  status      String?   @default("TODO")
  priority    String?   @default("MEDIUM")
  dueDate     DateTime? @db.Timestamp(6)
  projectId   String
  assignedTo  String?
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  comments    Comment[]
  assignee    User?     @relation("AssignedTasks", fields: [assignedTo], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Task")
  @@schema("dev_operations_db")
}

model Comment {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  content   String
  taskId    String
  userId    String
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  task      Task      @relation(fields: [taskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Comment")
  @@schema("dev_operations_db")
}

model DocPage {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  title     String
  content   String
  projectId String
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("DocPage")
  @@schema("dev_operations_db")
}

model ChatMessage {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  content   String
  projectId String
  userId    String
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mentions  Mention[]

  @@map("ChatMessage")
  @@schema("dev_operations_db")
}

model Mention {
  id        String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  messageId String
  userId    String
  createdAt DateTime?   @default(now()) @db.Timestamp(6)
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Mention")
  @@schema("dev_operations_db")
}

model SubscriptionPlan {
  id            String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String
  description   String?
  price         Decimal            @db.Decimal
  interval      String
  intervalCount Int?               @default(1)
  stripePriceId String             @unique
  features      Json?
  isActive      Boolean?           @default(true)
  createdAt     DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?          @default(now()) @updatedAt @db.Timestamp(6)
  subscriptions UserSubscription[]

  @@map("SubscriptionPlan")
  @@schema("dev_operations_db")
}

model UserSubscription {
  id                   String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId               String
  subscriptionPlanId   String
  stripeCustomerId     String
  stripeSubscriptionId String           @unique
  status               String
  currentPeriodStart   DateTime         @db.Timestamp(6)
  currentPeriodEnd     DateTime         @db.Timestamp(6)
  cancelAtPeriodEnd    Boolean?         @default(false)
  createdAt            DateTime?        @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?        @default(now()) @updatedAt @db.Timestamp(6)
  subscriptionPlan     SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, subscriptionPlanId])
  @@map("UserSubscription")
  @@schema("dev_operations_db")
}

model StripeCustomer {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId           String    @unique
  stripeCustomerId String    @unique
  email            String
  name             String?
  createdAt        DateTime? @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("StripeCustomer")
  @@schema("dev_operations_db")
}

model PaymentTransaction {
  id                    String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                String
  stripePaymentIntentId String    @unique
  amount                Decimal   @db.Decimal
  currency              String?   @default("usd")
  status                String
  description           String?
  metadata              Json?
  createdAt             DateTime? @default(now()) @db.Timestamp(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("PaymentTransaction")
  @@schema("dev_operations_db")
}

model UsageTracking {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String
  feature     String
  count       Int?      @default(1)
  period      String
  periodStart DateTime  @db.Timestamp(6)
  periodEnd   DateTime  @db.Timestamp(6)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, feature, period, periodStart])
  @@map("UsageTracking")
  @@schema("dev_operations_db")
}

model UserSettings {
  id                   String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId               String    @unique
  profileVisibility    String?   @default("team")
  showActivityStatus   Boolean?  @default(true)
  emailNotifications   Boolean?  @default(true)
  pushNotifications    Boolean?  @default(true)
  taskAssignmentAlerts Boolean?  @default(true)
  mentionAlerts        Boolean?  @default(true)
  createdAt            DateTime? @default(now()) @db.Timestamp(6)
  updatedAt            DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("UserSettings")
  @@schema("dev_operations_db")
}

model Notification {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean?  @default(false)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("Notification")
  @@schema("dev_operations_db")
}
