// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  subscriptionTier  String   @default("free") // "free", "pro", "lifetime"
  projectLimit      Int      @default(5)
  stripeCustomerId  String?
  subscriptionStatus String? // "active", "canceled", "past_due", "unpaid"
  accounts      Account[]
  sessions      Session[]
  projects      ProjectMember[]
  tasks         Task[]        @relation("AssignedTasks")
  comments      Comment[]
  chatMessages  ChatMessage[]
  mentions      Mention[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subscriptions     UserSubscription[]
  stripeCustomer    StripeCustomer?
  paymentTransactions PaymentTransaction[]
  usageTracking     UsageTracking[]
  settings          UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String
  tags        String[]
  members     ProjectMember[]
  tasks       Task[]
  docs        DocPage[]
  chatMessages ChatMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId], name: "userId_projectId")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      Status   @default(TODO)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  projectId   String
  assignedTo  String?
  project     Project  @relation(fields: [projectId], references: [id])
  assignee    User?    @relation("AssignedTasks", fields: [assignedTo], references: [id])
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model DocPage {
  id        String   @id @default(cuid())
  title     String
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  mentions  Mention[]
  createdAt DateTime @default(now())
}

model Mention {
  id        String       @id @default(cuid())
  messageId String
  userId    String
  message   ChatMessage  @relation(fields: [messageId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  interval    String   // "month", "year", "lifetime"
  intervalCount Int    @default(1)
  stripePriceId String @unique
  features    Json?    // Store plan features as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subscriptions UserSubscription[]
}

model UserSubscription {
  id                String   @id @default(cuid())
  userId            String
  subscriptionPlanId String
  stripeCustomerId  String
  stripeSubscriptionId String @unique
  status            String   // "active", "canceled", "past_due", "unpaid"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  
  @@unique([userId, subscriptionPlanId])
}

model StripeCustomer {
  id              String   @id @default(cuid())
  userId          String   @unique
  stripeCustomerId String  @unique
  email           String
  name            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentIntentId String @unique
  amount            Decimal
  currency          String   @default("usd")
  status            String   // "succeeded", "failed", "canceled"
  description       String?
  metadata          Json?
  createdAt         DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageTracking {
  id          String   @id @default(cuid())
  userId      String
  feature     String   // "projects_created", "tasks_created", etc.
  count       Int      @default(1)
  period      String   // "month", "year"
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, feature, period, periodStart])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  // Privacy & Security
  twoFactorEnabled      Boolean  @default(false)
  twoFactorSecret       String?  // Store 2FA secret
  profileVisibility     String   @default("team") // "team", "public", "private"
  showActivityStatus    Boolean  @default(true)
  // Appearance
  theme                 String   @default("light") // "light", "dark", "auto"
  language              String   @default("en") // "en", "es", "fr", "de"
  timezone              String   @default("UTC-8") // User's timezone
  // Notifications (for future use)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  taskAssignmentAlerts  Boolean  @default(true)
  mentionAlerts         Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}